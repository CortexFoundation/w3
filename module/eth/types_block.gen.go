// Code generated by github.com/fjl/gencodec. DO NOT EDIT.

package eth

import (
	"encoding/json"
	"errors"
	"math/big"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/common/hexutil"
	"github.com/ethereum/go-ethereum/core/types"
)

var _ = (*rpcBlockMarshaling)(nil)

// MarshalJSON marshals as JSON.
func (r RPCBlock) MarshalJSON() ([]byte, error) {
	type RPCBlock struct {
		Hash         common.Hash      `json:"hash"`
		Transactions []RPCTransaction `json:"transactions"`
		UncleHashes  []common.Hash    `json:"uncles"`
		ParentHash   common.Hash      `json:"parentHash"       gencodec:"required"`
		UncleHash    common.Hash      `json:"sha3Uncles"       gencodec:"required"`
		Coinbase     common.Address   `json:"miner"            gencodec:"required"`
		Root         common.Hash      `json:"stateRoot"        gencodec:"required"`
		TxHash       common.Hash      `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash  common.Hash      `json:"receiptsRoot"     gencodec:"required"`
		Bloom        types.Bloom      `json:"logsBloom"        gencodec:"required"`
		Difficulty   *hexutil.Big     `json:"difficulty"       gencodec:"required"`
		Number       *hexutil.Big     `json:"number"           gencodec:"required"`
		GasLimit     hexutil.Uint64   `json:"gasLimit"         gencodec:"required"`
		GasUsed      hexutil.Uint64   `json:"gasUsed"          gencodec:"required"`
		Time         hexutil.Uint64   `json:"timestamp"        gencodec:"required"`
		Extra        hexutil.Bytes    `json:"extraData"        gencodec:"required"`
		MixDigest    common.Hash      `json:"mixHash"`
		Nonce        types.BlockNonce `json:"nonce"`
		BaseFee      *hexutil.Big     `json:"baseFeePerGas" rlp:"optional"`
	}
	var enc RPCBlock
	enc.Hash = r.Hash
	enc.Transactions = r.Transactions
	enc.UncleHashes = r.UncleHashes
	enc.ParentHash = r.ParentHash
	enc.UncleHash = r.UncleHash
	enc.Coinbase = r.Coinbase
	enc.Root = r.Root
	enc.TxHash = r.TxHash
	enc.ReceiptHash = r.ReceiptHash
	enc.Bloom = r.Bloom
	enc.Difficulty = (*hexutil.Big)(r.Difficulty)
	enc.Number = (*hexutil.Big)(r.Number)
	enc.GasLimit = hexutil.Uint64(r.GasLimit)
	enc.GasUsed = hexutil.Uint64(r.GasUsed)
	enc.Time = hexutil.Uint64(r.Time)
	enc.Extra = r.Extra
	enc.MixDigest = r.MixDigest
	enc.Nonce = r.Nonce
	enc.BaseFee = (*hexutil.Big)(r.BaseFee)
	return json.Marshal(&enc)
}

// UnmarshalJSON unmarshals from JSON.
func (r *RPCBlock) UnmarshalJSON(input []byte) error {
	type RPCBlock struct {
		Hash         *common.Hash      `json:"hash"`
		Transactions []RPCTransaction  `json:"transactions"`
		UncleHashes  []common.Hash     `json:"uncles"`
		ParentHash   *common.Hash      `json:"parentHash"       gencodec:"required"`
		UncleHash    *common.Hash      `json:"sha3Uncles"       gencodec:"required"`
		Coinbase     *common.Address   `json:"miner"            gencodec:"required"`
		Root         *common.Hash      `json:"stateRoot"        gencodec:"required"`
		TxHash       *common.Hash      `json:"transactionsRoot" gencodec:"required"`
		ReceiptHash  *common.Hash      `json:"receiptsRoot"     gencodec:"required"`
		Bloom        *types.Bloom      `json:"logsBloom"        gencodec:"required"`
		Difficulty   *hexutil.Big      `json:"difficulty"       gencodec:"required"`
		Number       *hexutil.Big      `json:"number"           gencodec:"required"`
		GasLimit     *hexutil.Uint64   `json:"gasLimit"         gencodec:"required"`
		GasUsed      *hexutil.Uint64   `json:"gasUsed"          gencodec:"required"`
		Time         *hexutil.Uint64   `json:"timestamp"        gencodec:"required"`
		Extra        *hexutil.Bytes    `json:"extraData"        gencodec:"required"`
		MixDigest    *common.Hash      `json:"mixHash"`
		Nonce        *types.BlockNonce `json:"nonce"`
		BaseFee      *hexutil.Big      `json:"baseFeePerGas" rlp:"optional"`
	}
	var dec RPCBlock
	if err := json.Unmarshal(input, &dec); err != nil {
		return err
	}
	if dec.Hash != nil {
		r.Hash = *dec.Hash
	}
	if dec.Transactions != nil {
		r.Transactions = dec.Transactions
	}
	if dec.UncleHashes != nil {
		r.UncleHashes = dec.UncleHashes
	}
	if dec.ParentHash == nil {
		return errors.New("missing required field 'parentHash' for RPCBlock")
	}
	r.ParentHash = *dec.ParentHash
	if dec.UncleHash == nil {
		return errors.New("missing required field 'sha3Uncles' for RPCBlock")
	}
	r.UncleHash = *dec.UncleHash
	if dec.Coinbase == nil {
		return errors.New("missing required field 'miner' for RPCBlock")
	}
	r.Coinbase = *dec.Coinbase
	if dec.Root == nil {
		return errors.New("missing required field 'stateRoot' for RPCBlock")
	}
	r.Root = *dec.Root
	if dec.TxHash == nil {
		return errors.New("missing required field 'transactionsRoot' for RPCBlock")
	}
	r.TxHash = *dec.TxHash
	if dec.ReceiptHash == nil {
		return errors.New("missing required field 'receiptsRoot' for RPCBlock")
	}
	r.ReceiptHash = *dec.ReceiptHash
	if dec.Bloom == nil {
		return errors.New("missing required field 'logsBloom' for RPCBlock")
	}
	r.Bloom = *dec.Bloom
	if dec.Difficulty == nil {
		return errors.New("missing required field 'difficulty' for RPCBlock")
	}
	r.Difficulty = (*big.Int)(dec.Difficulty)
	if dec.Number == nil {
		return errors.New("missing required field 'number' for RPCBlock")
	}
	r.Number = (*big.Int)(dec.Number)
	if dec.GasLimit == nil {
		return errors.New("missing required field 'gasLimit' for RPCBlock")
	}
	r.GasLimit = uint64(*dec.GasLimit)
	if dec.GasUsed == nil {
		return errors.New("missing required field 'gasUsed' for RPCBlock")
	}
	r.GasUsed = uint64(*dec.GasUsed)
	if dec.Time == nil {
		return errors.New("missing required field 'timestamp' for RPCBlock")
	}
	r.Time = uint64(*dec.Time)
	if dec.Extra == nil {
		return errors.New("missing required field 'extraData' for RPCBlock")
	}
	r.Extra = *dec.Extra
	if dec.MixDigest != nil {
		r.MixDigest = *dec.MixDigest
	}
	if dec.Nonce != nil {
		r.Nonce = *dec.Nonce
	}
	if dec.BaseFee != nil {
		r.BaseFee = (*big.Int)(dec.BaseFee)
	}
	return nil
}
